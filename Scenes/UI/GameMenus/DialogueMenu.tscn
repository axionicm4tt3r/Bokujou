[gd_scene load_steps=4 format=2]

[ext_resource path="res://Scenes/UI/Components/Input/UIInput.tscn" type="PackedScene" id=1]
[ext_resource path="res://Resources/Themes/game_theme.tres" type="Theme" id=3]

[sub_resource type="CSharpScript" id=1]
script/source = "using Godot;
using static Helpers;

public class DialogueMenu : Panel
{
	private bool isOpen = false;
	private bool openedThisFrame = false;
	private bool isInteracting = false;
	private float timer = 0;
	private string[] textToPrint = { };

	private int currentChar;
	private int currentText;

	private float timeEnteredState;
	private PrintingState previousPrintingState;
	private PrintingState currentPrintingState;

	private const float WRITE_SPEED = 0.05f;

	private RichTextLabel dialogueText;

	private void TransitionToState(PrintingState newState)
	{
		previousPrintingState = currentPrintingState;
		OnStateExit(previousPrintingState, newState);
		currentPrintingState = newState;
		//TODO: Add time here
		OnStateEnter(newState, previousPrintingState);
	}

	private void OnStateEnter(PrintingState state, PrintingState fromState)
	{
		switch (state)
		{
			case PrintingState.Printing:
				dialogueText.BbcodeText = \"\";
				currentChar = 0;
				timer = 0;
				Debug.Print($\"Printing {textToPrint[currentText]}\");
				break;
			case PrintingState.Paused:
				dialogueText.BbcodeText = textToPrint[currentText];
				Debug.Print($\"Paused after printing {textToPrint[currentText]}\");
				currentText += 1;
				break;
			case PrintingState.Done:
				Debug.Print(\"Done!\");
				break;
		}
	}

	private void OnStateExit(PrintingState state, PrintingState toState)
	{

	}

	public override void _Ready()
	{
		base._Ready();

		dialogueText = GetNode<RichTextLabel>(\"Margin/VB/DialogueText\");

		TransitionToState(PrintingState.Done);
	}

	public override void _Input(InputEvent @event)
	{
		base._Input(@event);
		if (@event.IsActionPressed(PlayerInputCodes.X))
			isInteracting = true;
	}

	public override void _Process(float delta)
	{
		base._Process(delta);

		if (isOpen && !Global.Instance.MainPause)
		{
			//TODO: Upgrade this logic to signals
			//Create new events that 
			switch (currentPrintingState)
			{
				case PrintingState.Printing:
					timer += delta;
					if (timer > WRITE_SPEED)
					{
						timer = 0;
						var currentDialogueText = dialogueText.BbcodeText;
						dialogueText.BbcodeText = $\"{currentDialogueText}{textToPrint[currentText][currentChar]}\";
						currentChar += 1;
					}

					if (currentChar >= textToPrint[currentText].Length)
						TransitionToState(PrintingState.Paused);

					if (!openedThisFrame && isInteracting)
					{
						dialogueText.BbcodeText = textToPrint[currentText];
						TransitionToState(PrintingState.Paused);
					}

					break;

				case PrintingState.Paused:
					if (currentText >= textToPrint.Length)
						TransitionToState(PrintingState.Done);

					else if (!openedThisFrame && isInteracting)
						TransitionToState(PrintingState.Printing);
					break;

				case PrintingState.Done:
					if (isInteracting)
						HideDialogue();

					break;
			}

			openedThisFrame = false;
			isInteracting = false;
		}
	}

	public void HideDialogue()
	{
		EventManager.RaiseEvent(GlobalEventCodes.DialogueComplete);

		this.Hide();
		Global.Instance.DialoguePause = false;
		isOpen = false;
		dialogueText.BbcodeText = \"\";
	}

	public void ShowDialogue(string[] text)
	{
		this.Show();
		Global.Instance.DialoguePause = true;
		isOpen = true;
		openedThisFrame = true;
		textToPrint = text;
		currentText = 0;
		TransitionToState(PrintingState.Printing);
	}
}

public enum PrintingState
{
	Printing,
	Paused,
	Done
}
"

[node name="DialogueMenu" type="Panel"]
anchor_left = 0.5
anchor_top = 0.8
anchor_right = 0.5
anchor_bottom = 0.8
margin_left = -160.0
margin_top = -102.0
margin_right = 160.0
margin_bottom = 34.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 320, 136 )
theme = ExtResource( 3 )
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Margin" type="MarginContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -16.0
rect_min_size = Vector2( 320, 136 )
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VB" type="VBoxContainer" parent="Margin"]
margin_left = 4.0
margin_top = 4.0
margin_right = 316.0
margin_bottom = 132.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="DialogueSpeaker" type="RichTextLabel" parent="Margin/VB"]
margin_right = 312.0
margin_bottom = 16.0
rect_min_size = Vector2( 0, 16 )
bbcode_enabled = true
bbcode_text = "Test Label"
text = "Test Label"
fit_content_height = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DialogueText" type="RichTextLabel" parent="Margin/VB"]
margin_top = 20.0
margin_right = 312.0
margin_bottom = 108.0
rect_min_size = Vector2( 0, 88 )
size_flags_horizontal = 3
size_flags_stretch_ratio = 9.0
bbcode_enabled = true
bbcode_text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "
text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. "
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HB" type="HBoxContainer" parent="Margin/VB"]
margin_top = 112.0
margin_right = 312.0
margin_bottom = 128.0
rect_min_size = Vector2( 0, 16 )
alignment = 2

[node name="UIInput_Skip" parent="Margin/VB/HB" instance=ExtResource( 1 )]
visible = false
margin_left = 277.0
margin_right = 294.0
InputButton = 15
Text = "Skip"

[node name="UIInput_OK" parent="Margin/VB/HB" instance=ExtResource( 1 )]
visible = false
margin_left = 260.0
margin_right = 294.0
InputButton = 15
Text = "Next"

[node name="UIInput_Leave" parent="Margin/VB/HB" instance=ExtResource( 1 )]
visible = false
margin_left = 295.0
margin_right = 312.0
InputButton = 15
Text = "Goodbye"

[node name="Padding" type="Control" parent="Margin/VB/HB"]
margin_left = 296.0
margin_right = 312.0
margin_bottom = 16.0
rect_min_size = Vector2( 16, 0 )
